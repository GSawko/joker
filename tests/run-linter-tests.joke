(defn file-exists?
  [path]
  (try
    (slurp path)
    true
    (catch Error e
      false)))

(let [test-dirs (->> (joker.os/sh "ls" "tests/linter")
                     :out
                     (joker.string/split-lines)
                     (remove #(= "" %)))
      pwd (get (joker.os/env) "PWD")]
  (doseq [test-dir test-dirs]
    (let [dir (str "tests/linter/" test-dir "/")
          filename (if (file-exists? (str dir "input.clj"))
                     (str dir "input.clj")
                     (str dir "input.cljs"))
          output (:err (joker.os/sh (str pwd "/joker") "--lint" filename))
          output-lines (joker.string/split-lines output)
          output-lines-without-stacktraces (remove #(joker.string/starts-with? % "  ") output-lines)
          output-without-stacktraces (joker.string/join "\n" output-lines-without-stacktraces)
          expected (slurp (str dir "output.txt"))]
      (when-not (= expected output-without-stacktraces)
        (println "FAILED:" test-dir)
        (println "EXPECTED:")
        (println expected)
        (println "ACTUAL:")
        (println output-without-stacktraces)
        (joker.os/exit 1)))))
