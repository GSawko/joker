(split-at 1 2)
(map (fn []) 2)
(cons 1 2)
(first 2)
(next 1)
(rest 2)
(second 1)
(ffirst 1)
(nfirst 1)
(fnext 2)
(nnext 1)
(seq 2)
(instance? 1 2)
(ex-info {} "")
(first 1)
(assoc 1 2 3)
(with-meta "sd" nil)
(with-meta {} 1)
(last 1)
(butlast 1)
(cast 1 2)
(vec 1)
(list* 1)
(apply 1 2)
(vary-meta {} 1)
(concat 1 2)
(zero? "a")
(nth [] "a")
(apply 1 2 3 4 5 6)
(< "1" "2")
(inc' "1")
(inc "2")
(reduce 1 2)
(reverse 1)
(+' "1" "2")
(+ "1" "2")
(*' "1" "2")
(* "1" "2")
(/ "1" "2")
(-' "1" "2")
(- "1" "2")
(<= "1" "2")
(> "1" "2")
(>= "1" "2")
(== "1" "2")
