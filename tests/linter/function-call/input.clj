(defn f1 [])
(defn f2 [x])
(def v1 1)
(def k :t)
(def m {})
(def s #{})
;; Should PASS

(spit "test" "test" :append true)
(map identity)
(f1)
(f2 1)
(k {})
((fn []))
(#{} 1)
(s 1)
([] 1)
([]) ;; we don't check vector call arity as it would cause false positives in some macros (like alt!!)
({1 2} 1)
({1 2} 1 2)
(m 1)
(m 1 2)
(:t 1 2)
(:t 1)

;; Should FAIL
(map)
(*assert*)
(f1 1)
(f2)
(v1)
(1)
("")
((fn []) 1)
(:t)
(:t 1 2 3)
({})
({} 1 2 3)
(m)
(m 1 2 3)
(#{})
(#{} 1 2)
(s)
(s 1 2)
(= 1)
(not= 1)
(< 1)
(> 1)
(<= 1)
(>= 1)
(== 1)
