(ns
  ^{:go-imports ["strings"]
    :doc "Implements simple functions to manipulate strings."}
  string)

(defn ^Bool ends-with?
  "True if s ends with substr."
  {:added "1.0"
  :go "strings.HasSuffix(s, substr)"}
  [^String s ^String substr])

(defn ^Bool starts-with?
  "True if s starts with substr."
  {:added "1.0"
  :go "strings.HasPrefix(s, substr)"}
  [^String s ^String substr])

(defn ^String pad-right
  "Returns s padded with pad at the end to length n."
  {:added "1.0"
  :go "padRight(s, pad, n)"}
  [^String s ^String pad ^Int n])

(defn ^String pad-left
  "Returns s padded with pad at the beginning to length n."
  {:added "1.0"
  :go "padLeft(s, pad, n)"}
  [^String s ^String pad ^Int n])

(defn split
  "Splits string on a regular expression. Returns vector of the splits."
  {:added "1.0"
  :go "split(s, re)"}
  [^String s ^Regex re])

(defn split-lines
  "Splits string on \\n or \\r\\n. Returns vector of the splits."
  {:added "1.0"
  :go "split(s, newLine)"}
  [^String s])

(defn ^String join
  "Returns a string of all elements in coll, as returned by (seq coll), separated by a separator."
  {:added "1.0"
  :go "join(separator, coll)"}
  [^String separator ^Seqable coll])

(defn ^String replace
  "Replaces all instances of string old with string new in string s."
  {:added "1.0"
  :go "strings.Replace(s, old, new, -1)"}
  [^String s ^String old ^String new])

(defn ^String trim-space
  "Returns a string s, with all leading and trailing white space removed, as defined by Unicode."
  {:added "1.0"
  :go "strings.TrimSpace(s)"}
  [^String s])

(defn ^Bool blank?
  "True if s is nil, empty, or contains only whitespace."
  {:added "1.0"
  :go "isBlank(s)"}
  [^Object s])

(defn ^String capitalize
  "Converts first character of the string to upper-case, all other
  characters to lower-case."
  {:added "1.0"
  :go "capitalize(s)"}
  [^String s])

(defn ^String escape
  "Return a new string, using cmap to escape each character ch
  from s as follows:

  If (cmap ch) is nil, append ch to the new string.
  If (cmap ch) is non-nil, append (str (cmap ch)) instead."
  {:added "1.0"
  :go "escape(s, cmap)"}
  [^String s ^Callable cmap])

(defn ^Bool includes?
  "True if s includes substr."
  {:added "1.0"
  :go "strings.Contains(s, substr)"}
  [^String s ^String substr])

(defn index-of
  "Return index of value (string or char) in s, optionally searching
  forward from from-index or nil if not found."
  {:added "1.0"
  :go "indexOf(s, value)"}
  [^String s ^Object value])
