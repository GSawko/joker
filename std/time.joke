(ns
  ^{:go-imports ["time"]
    :doc "Provides functionality for measuring and displaying time."}
  time)

(defn sleep
  "Pauses the execution thread for at least the duration d (expressed in nanoseconds).
  A negative or zero duration causes sleep to return immediately."
  {:added "1.0"
  :go "sleep(d)"}
  [^Int d])

(defn ^Time now
  "Returns the current local time."
  {:added "1.0"
  :go "time.Now()"}
  [])

(defn ^Time from-unix
  "Returns the local Time corresponding to the given Unix time, sec seconds and
  nsec nanoseconds since January 1, 1970 UTC. It is valid to pass nsec outside the range [0, 999999999]."
  {:added "1.0"
  :go "time.Unix(int64(sec), int64(nsec))"}
  [^Int sec ^Int nsec])

(defn ^Int unix
  "Returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC."
  {:added "1.0"
  :go "int(t.Unix())"}
  [^Time t])

(defn ^Int sub
  "Returns the duration t-u in nanoseconds."
  {:added "1.0"
  :go "int(t.Sub(u))"}
  [^Time t ^Time u])

(defn ^Int parse-duration
  "Parses a duration string. A duration string is a possibly signed sequence of decimal numbers,
  each with optional fraction and a unit suffix, such as 300ms, -1.5h or 2h45m. Valid time units are
  ns, us (or Âµs), ms, s, m, h."
  {:added "1.0"
  :go "!t, err := time.ParseDuration(s); PanicOnErr(err); res := int(t)"}
  [^String s])
