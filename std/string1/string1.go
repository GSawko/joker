// This file is generated by generate-std.joke script. Do not edit manually!

package string1

import (
  "strings"
  . "github.com/candid82/joker/core"
)

var string1Namespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("joker.string1"))

func intern(name string, proc Proc) {
  string1Namespace.Intern(MakeSymbol(name)).Value = proc
}

var split_lines_ Proc = func(args []Object) Object {
  CheckArity(args, 1, 1)
  s := ExtractString(args, 0)
  res := split(s, newLine)
  return res
}

var isends_with_ Proc = func(args []Object) Object {
  CheckArity(args, 2, 2)
  s := ExtractString(args, 0)
  substr := ExtractString(args, 1)
  res := strings.HasSuffix(s, substr)
  return MakeBool(res)
}

var pad_right_ Proc = func(args []Object) Object {
  CheckArity(args, 3, 3)
  s := ExtractString(args, 0)
  pad := ExtractString(args, 1)
  n := ExtractInt(args, 2)
  res := padRight(s, pad, n)
  return MakeString(res)
}

var join_ Proc = func(args []Object) Object {
  CheckArity(args, 2, 2)
  separator := ExtractString(args, 0)
  coll := ExtractSeqable(args, 1)
  res := join(separator, coll)
  return MakeString(res)
}

var pad_left_ Proc = func(args []Object) Object {
  CheckArity(args, 3, 3)
  s := ExtractString(args, 0)
  pad := ExtractString(args, 1)
  n := ExtractInt(args, 2)
  res := padLeft(s, pad, n)
  return MakeString(res)
}

var split_ Proc = func(args []Object) Object {
  CheckArity(args, 2, 2)
  s := ExtractString(args, 0)
  re := ExtractRegex(args, 1)
  res := split(s, re)
  return res
}


func init() {

string1Namespace.ResetMeta(MakeMeta(nil, "Implements simple functions to manipulate strings.", "1.0"))

string1Namespace.InternVar("split-lines", split_lines_,
  MakeMeta(
    NewListFrom(NewVectorFrom(MakeSymbol("s"))),
    "Splits string on \n or \r\n. Returns vector of the splits.", "1.0"))

string1Namespace.InternVar("ends-with?", isends_with_,
  MakeMeta(
    NewListFrom(NewVectorFrom(MakeSymbol("s"), MakeSymbol("substr"))),
    "True if s ends with substr.", "1.0"))

string1Namespace.InternVar("pad-right", pad_right_,
  MakeMeta(
    NewListFrom(NewVectorFrom(MakeSymbol("s"), MakeSymbol("pad"), MakeSymbol("n"))),
    "Returns s padded with pad at the end to length n.", "1.0"))

string1Namespace.InternVar("join", join_,
  MakeMeta(
    NewListFrom(NewVectorFrom(MakeSymbol("separator"), MakeSymbol("coll"))),
    "Returns a string of all elements in coll, as returned by (seq coll), separated by a separator.", "1.0"))

string1Namespace.InternVar("pad-left", pad_left_,
  MakeMeta(
    NewListFrom(NewVectorFrom(MakeSymbol("s"), MakeSymbol("pad"), MakeSymbol("n"))),
    "Returns s padded with pad at the beginning to length n.", "1.0"))

string1Namespace.InternVar("split", split_,
  MakeMeta(
    NewListFrom(NewVectorFrom(MakeSymbol("s"), MakeSymbol("re"))),
    "Splits string on a regular expression. Returns vector of the splits.", "1.0"))

}
