(def ns-template
  (slurp "templates/ns.html"))

(def var-template
  (slurp "templates/var.html"))

(def var-link-template
  (slurp "templates/var-link.html"))

(def usage-template
  (slurp "templates/usage.html"))

(defn type-name
  [v]
  (cond
    (not (bound? v)) "Object"
    (:macro (meta v)) "Macro"
    (= Fn (type @v)) "Function"
    (= Proc (type @v)) "Function"
    :else (str (type @v))))

(defn var-link-doc
  [k]
  (string/replace var-link-template "{name}" k))

(defn usage
  [k arglists]
  (let [examples (for [arglist arglists]
                   (string/replace usage-template "{usage}" (str (apply list k arglist))))]
    (string/join "" examples)))

(defn var-doc
  [k v]
  (let [m (meta v)]
    (-> var-template
        (string/replace "{id}" k)
        (string/replace "{name}" k)
        (string/replace "{type}" (type-name v))
        (string/replace "{usage}" (usage k (:arglists m)))
        (string/replace "{docstring}" (string/replace (str (:doc m)) "\n" "<br>"))
        (string/replace "{added}" (str (:added m))))))

(defn ns-doc
  [ns-sym]
  (let [vars-doc (string/join
                  ""
                  (for [[k v] (sort (ns-publics ns-sym))]
                    (var-doc (str k) v)))
        var-links-doc (string/join
                       ""
                       (for [k (sort (keys (ns-publics ns-sym)))]
                         (var-link-doc (str k))))]
    (-> ns-template
        (string/replace "{name}" (name ns-sym))
        (string/replace  "{vars}" vars-doc)
        (string/replace "{index}" var-links-doc))))

(spit "index.html" (ns-doc 'core))



