// Generated by gen_types. Don't modify manually!

package core

import (
	"io"
)

func EnsureIsComparable(obj Object, failFn FailFn, failArgs ...interface{}) Comparable {
	switch c := obj.(type) {
	case Comparable:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsComparable(obj Object, pattern string) Comparable {
	return EnsureIsComparable(obj, FailObject, pattern)
}

func EnsureArgIsComparable(args []Object, index int) Comparable {
	return EnsureIsComparable(args[index], FailExtract, index)
}

func EnsureIsVector(obj Object, failFn FailFn, failArgs ...interface{}) *Vector {
	switch c := obj.(type) {
	case *Vector:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsVector(obj Object, pattern string) *Vector {
	return EnsureIsVector(obj, FailObject, pattern)
}

func EnsureArgIsVector(args []Object, index int) *Vector {
	return EnsureIsVector(args[index], FailExtract, index)
}

func EnsureIsChar(obj Object, failFn FailFn, failArgs ...interface{}) Char {
	switch c := obj.(type) {
	case Char:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsChar(obj Object, pattern string) Char {
	return EnsureIsChar(obj, FailObject, pattern)
}

func EnsureArgIsChar(args []Object, index int) Char {
	return EnsureIsChar(args[index], FailExtract, index)
}

func EnsureIsString(obj Object, failFn FailFn, failArgs ...interface{}) String {
	switch c := obj.(type) {
	case String:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsString(obj Object, pattern string) String {
	return EnsureIsString(obj, FailObject, pattern)
}

func EnsureArgIsString(args []Object, index int) String {
	return EnsureIsString(args[index], FailExtract, index)
}

func EnsureIsSymbol(obj Object, failFn FailFn, failArgs ...interface{}) Symbol {
	switch c := obj.(type) {
	case Symbol:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsSymbol(obj Object, pattern string) Symbol {
	return EnsureIsSymbol(obj, FailObject, pattern)
}

func EnsureArgIsSymbol(args []Object, index int) Symbol {
	return EnsureIsSymbol(args[index], FailExtract, index)
}

func EnsureIsKeyword(obj Object, failFn FailFn, failArgs ...interface{}) Keyword {
	switch c := obj.(type) {
	case Keyword:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsKeyword(obj Object, pattern string) Keyword {
	return EnsureIsKeyword(obj, FailObject, pattern)
}

func EnsureArgIsKeyword(args []Object, index int) Keyword {
	return EnsureIsKeyword(args[index], FailExtract, index)
}

func EnsureIsRegex(obj Object, failFn FailFn, failArgs ...interface{}) *Regex {
	switch c := obj.(type) {
	case *Regex:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsRegex(obj Object, pattern string) *Regex {
	return EnsureIsRegex(obj, FailObject, pattern)
}

func EnsureArgIsRegex(args []Object, index int) *Regex {
	return EnsureIsRegex(args[index], FailExtract, index)
}

func EnsureIsBoolean(obj Object, failFn FailFn, failArgs ...interface{}) Boolean {
	switch c := obj.(type) {
	case Boolean:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsBoolean(obj Object, pattern string) Boolean {
	return EnsureIsBoolean(obj, FailObject, pattern)
}

func EnsureArgIsBoolean(args []Object, index int) Boolean {
	return EnsureIsBoolean(args[index], FailExtract, index)
}

func EnsureIsTime(obj Object, failFn FailFn, failArgs ...interface{}) Time {
	switch c := obj.(type) {
	case Time:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsTime(obj Object, pattern string) Time {
	return EnsureIsTime(obj, FailObject, pattern)
}

func EnsureArgIsTime(args []Object, index int) Time {
	return EnsureIsTime(args[index], FailExtract, index)
}

func EnsureIsNumber(obj Object, failFn FailFn, failArgs ...interface{}) Number {
	switch c := obj.(type) {
	case Number:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsNumber(obj Object, pattern string) Number {
	return EnsureIsNumber(obj, FailObject, pattern)
}

func EnsureArgIsNumber(args []Object, index int) Number {
	return EnsureIsNumber(args[index], FailExtract, index)
}

func EnsureIsSeqable(obj Object, failFn FailFn, failArgs ...interface{}) Seqable {
	switch c := obj.(type) {
	case Seqable:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsSeqable(obj Object, pattern string) Seqable {
	return EnsureIsSeqable(obj, FailObject, pattern)
}

func EnsureArgIsSeqable(args []Object, index int) Seqable {
	return EnsureIsSeqable(args[index], FailExtract, index)
}

func EnsureIsCallable(obj Object, failFn FailFn, failArgs ...interface{}) Callable {
	switch c := obj.(type) {
	case Callable:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsCallable(obj Object, pattern string) Callable {
	return EnsureIsCallable(obj, FailObject, pattern)
}

func EnsureArgIsCallable(args []Object, index int) Callable {
	return EnsureIsCallable(args[index], FailExtract, index)
}

func EnsureIsType(obj Object, failFn FailFn, failArgs ...interface{}) *Type {
	switch c := obj.(type) {
	case *Type:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsType(obj Object, pattern string) *Type {
	return EnsureIsType(obj, FailObject, pattern)
}

func EnsureArgIsType(args []Object, index int) *Type {
	return EnsureIsType(args[index], FailExtract, index)
}

func EnsureIsMeta(obj Object, failFn FailFn, failArgs ...interface{}) Meta {
	switch c := obj.(type) {
	case Meta:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsMeta(obj Object, pattern string) Meta {
	return EnsureIsMeta(obj, FailObject, pattern)
}

func EnsureArgIsMeta(args []Object, index int) Meta {
	return EnsureIsMeta(args[index], FailExtract, index)
}

func EnsureIsInt(obj Object, failFn FailFn, failArgs ...interface{}) Int {
	switch c := obj.(type) {
	case Int:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsInt(obj Object, pattern string) Int {
	return EnsureIsInt(obj, FailObject, pattern)
}

func EnsureArgIsInt(args []Object, index int) Int {
	return EnsureIsInt(args[index], FailExtract, index)
}

func EnsureIsDouble(obj Object, failFn FailFn, failArgs ...interface{}) Double {
	switch c := obj.(type) {
	case Double:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsDouble(obj Object, pattern string) Double {
	return EnsureIsDouble(obj, FailObject, pattern)
}

func EnsureArgIsDouble(args []Object, index int) Double {
	return EnsureIsDouble(args[index], FailExtract, index)
}

func EnsureIsStack(obj Object, failFn FailFn, failArgs ...interface{}) Stack {
	switch c := obj.(type) {
	case Stack:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsStack(obj Object, pattern string) Stack {
	return EnsureIsStack(obj, FailObject, pattern)
}

func EnsureArgIsStack(args []Object, index int) Stack {
	return EnsureIsStack(args[index], FailExtract, index)
}

func EnsureIsMap(obj Object, failFn FailFn, failArgs ...interface{}) Map {
	switch c := obj.(type) {
	case Map:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsMap(obj Object, pattern string) Map {
	return EnsureIsMap(obj, FailObject, pattern)
}

func EnsureArgIsMap(args []Object, index int) Map {
	return EnsureIsMap(args[index], FailExtract, index)
}

func EnsureIsSet(obj Object, failFn FailFn, failArgs ...interface{}) Set {
	switch c := obj.(type) {
	case Set:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsSet(obj Object, pattern string) Set {
	return EnsureIsSet(obj, FailObject, pattern)
}

func EnsureArgIsSet(args []Object, index int) Set {
	return EnsureIsSet(args[index], FailExtract, index)
}

func EnsureIsAssociative(obj Object, failFn FailFn, failArgs ...interface{}) Associative {
	switch c := obj.(type) {
	case Associative:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsAssociative(obj Object, pattern string) Associative {
	return EnsureIsAssociative(obj, FailObject, pattern)
}

func EnsureArgIsAssociative(args []Object, index int) Associative {
	return EnsureIsAssociative(args[index], FailExtract, index)
}

func EnsureIsReversible(obj Object, failFn FailFn, failArgs ...interface{}) Reversible {
	switch c := obj.(type) {
	case Reversible:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsReversible(obj Object, pattern string) Reversible {
	return EnsureIsReversible(obj, FailObject, pattern)
}

func EnsureArgIsReversible(args []Object, index int) Reversible {
	return EnsureIsReversible(args[index], FailExtract, index)
}

func EnsureIsNamed(obj Object, failFn FailFn, failArgs ...interface{}) Named {
	switch c := obj.(type) {
	case Named:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsNamed(obj Object, pattern string) Named {
	return EnsureIsNamed(obj, FailObject, pattern)
}

func EnsureArgIsNamed(args []Object, index int) Named {
	return EnsureIsNamed(args[index], FailExtract, index)
}

func EnsureIsComparator(obj Object, failFn FailFn, failArgs ...interface{}) Comparator {
	switch c := obj.(type) {
	case Comparator:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsComparator(obj Object, pattern string) Comparator {
	return EnsureIsComparator(obj, FailObject, pattern)
}

func EnsureArgIsComparator(args []Object, index int) Comparator {
	return EnsureIsComparator(args[index], FailExtract, index)
}

func EnsureIsRatio(obj Object, failFn FailFn, failArgs ...interface{}) *Ratio {
	switch c := obj.(type) {
	case *Ratio:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsRatio(obj Object, pattern string) *Ratio {
	return EnsureIsRatio(obj, FailObject, pattern)
}

func EnsureArgIsRatio(args []Object, index int) *Ratio {
	return EnsureIsRatio(args[index], FailExtract, index)
}

func EnsureIsNamespace(obj Object, failFn FailFn, failArgs ...interface{}) *Namespace {
	switch c := obj.(type) {
	case *Namespace:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsNamespace(obj Object, pattern string) *Namespace {
	return EnsureIsNamespace(obj, FailObject, pattern)
}

func EnsureArgIsNamespace(args []Object, index int) *Namespace {
	return EnsureIsNamespace(args[index], FailExtract, index)
}

func EnsureIsVar(obj Object, failFn FailFn, failArgs ...interface{}) *Var {
	switch c := obj.(type) {
	case *Var:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsVar(obj Object, pattern string) *Var {
	return EnsureIsVar(obj, FailObject, pattern)
}

func EnsureArgIsVar(args []Object, index int) *Var {
	return EnsureIsVar(args[index], FailExtract, index)
}

func EnsureIsError(obj Object, failFn FailFn, failArgs ...interface{}) Error {
	switch c := obj.(type) {
	case Error:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsError(obj Object, pattern string) Error {
	return EnsureIsError(obj, FailObject, pattern)
}

func EnsureArgIsError(args []Object, index int) Error {
	return EnsureIsError(args[index], FailExtract, index)
}

func EnsureIsFn(obj Object, failFn FailFn, failArgs ...interface{}) *Fn {
	switch c := obj.(type) {
	case *Fn:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsFn(obj Object, pattern string) *Fn {
	return EnsureIsFn(obj, FailObject, pattern)
}

func EnsureArgIsFn(args []Object, index int) *Fn {
	return EnsureIsFn(args[index], FailExtract, index)
}

func EnsureIsDeref(obj Object, failFn FailFn, failArgs ...interface{}) Deref {
	switch c := obj.(type) {
	case Deref:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsDeref(obj Object, pattern string) Deref {
	return EnsureIsDeref(obj, FailObject, pattern)
}

func EnsureArgIsDeref(args []Object, index int) Deref {
	return EnsureIsDeref(args[index], FailExtract, index)
}

func EnsureIsAtom(obj Object, failFn FailFn, failArgs ...interface{}) *Atom {
	switch c := obj.(type) {
	case *Atom:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsAtom(obj Object, pattern string) *Atom {
	return EnsureIsAtom(obj, FailObject, pattern)
}

func EnsureArgIsAtom(args []Object, index int) *Atom {
	return EnsureIsAtom(args[index], FailExtract, index)
}

func EnsureIsRef(obj Object, failFn FailFn, failArgs ...interface{}) Ref {
	switch c := obj.(type) {
	case Ref:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsRef(obj Object, pattern string) Ref {
	return EnsureIsRef(obj, FailObject, pattern)
}

func EnsureArgIsRef(args []Object, index int) Ref {
	return EnsureIsRef(args[index], FailExtract, index)
}

func EnsureIsKVReduce(obj Object, failFn FailFn, failArgs ...interface{}) KVReduce {
	switch c := obj.(type) {
	case KVReduce:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsKVReduce(obj Object, pattern string) KVReduce {
	return EnsureIsKVReduce(obj, FailObject, pattern)
}

func EnsureArgIsKVReduce(args []Object, index int) KVReduce {
	return EnsureIsKVReduce(args[index], FailExtract, index)
}

func EnsureIsPending(obj Object, failFn FailFn, failArgs ...interface{}) Pending {
	switch c := obj.(type) {
	case Pending:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsPending(obj Object, pattern string) Pending {
	return EnsureIsPending(obj, FailObject, pattern)
}

func EnsureArgIsPending(args []Object, index int) Pending {
	return EnsureIsPending(args[index], FailExtract, index)
}

func EnsureIsFile(obj Object, failFn FailFn, failArgs ...interface{}) *File {
	switch c := obj.(type) {
	case *File:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsFile(obj Object, pattern string) *File {
	return EnsureIsFile(obj, FailObject, pattern)
}

func EnsureArgIsFile(args []Object, index int) *File {
	return EnsureIsFile(args[index], FailExtract, index)
}

func EnsureIsio_Reader(obj Object, failFn FailFn, failArgs ...interface{}) io.Reader {
	switch c := obj.(type) {
	case io.Reader:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsio_Reader(obj Object, pattern string) io.Reader {
	return EnsureIsio_Reader(obj, FailObject, pattern)
}

func EnsureArgIsio_Reader(args []Object, index int) io.Reader {
	return EnsureIsio_Reader(args[index], FailExtract, index)
}

func EnsureIsio_Writer(obj Object, failFn FailFn, failArgs ...interface{}) io.Writer {
	switch c := obj.(type) {
	case io.Writer:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsio_Writer(obj Object, pattern string) io.Writer {
	return EnsureIsio_Writer(obj, FailObject, pattern)
}

func EnsureArgIsio_Writer(args []Object, index int) io.Writer {
	return EnsureIsio_Writer(args[index], FailExtract, index)
}

func EnsureIsStringReader(obj Object, failFn FailFn, failArgs ...interface{}) StringReader {
	switch c := obj.(type) {
	case StringReader:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsStringReader(obj Object, pattern string) StringReader {
	return EnsureIsStringReader(obj, FailObject, pattern)
}

func EnsureArgIsStringReader(args []Object, index int) StringReader {
	return EnsureIsStringReader(args[index], FailExtract, index)
}

func EnsureIsio_RuneReader(obj Object, failFn FailFn, failArgs ...interface{}) io.RuneReader {
	switch c := obj.(type) {
	case io.RuneReader:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsio_RuneReader(obj Object, pattern string) io.RuneReader {
	return EnsureIsio_RuneReader(obj, FailObject, pattern)
}

func EnsureArgIsio_RuneReader(args []Object, index int) io.RuneReader {
	return EnsureIsio_RuneReader(args[index], FailExtract, index)
}

func EnsureIsChannel(obj Object, failFn FailFn, failArgs ...interface{}) *Channel {
	switch c := obj.(type) {
	case *Channel:
		return c
	default:
		panic(failFn(obj, failArgs...))
	}
}

func EnsureObjectIsChannel(obj Object, pattern string) *Channel {
	return EnsureIsChannel(obj, FailObject, pattern)
}

func EnsureArgIsChannel(args []Object, index int) *Channel {
	return EnsureIsChannel(args[index], FailExtract, index)
}
