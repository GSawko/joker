package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"strings"

	. "github.com/candid82/joker/core"
	_ "github.com/candid82/joker/std/string"
)

var template string = `// Generated by gen_code. Don't modify manually!

package core

func init() {
	{name}NamespaceInfo = internalNamespaceInfo{init: {name}Init, generated: {name}NamespaceInfo.generated, available: true}
}

{code}
func {name}Init() {
{interns}
}
`

type FileInfo struct {
	name     string
	filename string
}

/* The entries must be ordered such that a given namespace depends
/* only upon namespaces loaded above it. E.g. joker.template depends
/* on joker.walk, so is listed afterwards, not in alphabetical
/* order. */
var files []FileInfo = []FileInfo{
	{
		name:     "<joker.core>",
		filename: "core.joke",
	},
	{
		name:     "<joker.repl>",
		filename: "repl.joke",
	},
	{
		name:     "<joker.walk>",
		filename: "walk.joke",
	},
	{
		name:     "<joker.template>",
		filename: "template.joke",
	},
	{
		name:     "<joker.test>",
		filename: "test.joke",
	},
	{
		name:     "<joker.set>",
		filename: "set.joke",
	},
	{
		name:     "<joker.tools.cli>",
		filename: "tools_cli.joke",
	},
	// {
	// 	name:     "<joker.core>",
	// 	filename: "linter_all.joke",
	// },
	// {
	// 	name:     "<joker.core>",
	// 	filename: "linter_joker.joke",
	// },
	// {
	// 	name:     "<joker.core>",
	// 	filename: "linter_cljx.joke",
	// },
	// {
	// 	name:     "<joker.core>",
	// 	filename: "linter_clj.joke",
	// },
	// {
	// 	name:     "<joker.core>",
	// 	filename: "linter_cljs.joke",
	// },
}

const hextable = "0123456789abcdef"

func main() {
	codeWriterEnv := &CodeWriterEnv{
		NeedSyms: map[*string]struct{}{},
		HaveSyms: map[*string]struct{}{},
	}

	GLOBAL_ENV.FindNamespace(MakeSymbol("user")).ReferAll(GLOBAL_ENV.CoreNamespace)
	for _, f := range files {
		GLOBAL_ENV.SetCurrentNamespace(GLOBAL_ENV.CoreNamespace)
		content, err := ioutil.ReadFile("data/" + f.filename)
		if err != nil {
			panic(err)
		}

		var code, interns string
		code, interns, err = CodeWriter(NewReader(bytes.NewReader(content), f.name), codeWriterEnv)
		PanicOnErr(err)

		name := f.filename[0 : len(f.filename)-5] // assumes .joke extension
		fileContent := strings.Replace(strings.Replace(strings.ReplaceAll(template, "{name}", name), "{code}", code, 1), "{interns}", interns, 1)
		ioutil.WriteFile("a_"+name+"_code.go", []byte(fileContent), 0666)
	}

	const allTemplate = `// Generated by gen_code. Don't modify manually!

package core

{code}
func init() {
{symbols}
}
`

	code := ""
	symbols := ""
	for s, _ := range codeWriterEnv.NeedSyms {
		if _, ok := codeWriterEnv.HaveSyms[s]; ok {
			continue
		}
		name := NameAsGo(*s)
		code += fmt.Sprintf(`
var sym_%s = &Symbol{ns: nil}
`[1:],
			name)

		symbols += fmt.Sprintf(`
	string_%s := STRINGS.Intern("%s")
	sym_%s.name = string_%s
`[1:],
			name, *s, name, name)
	}

	fileContent := strings.Replace(strings.Replace(allTemplate, "{symbols}", symbols, 1), "{code}", code, 1)
	ioutil.WriteFile("a_code.go", []byte(fileContent), 0666)
}
