(joker.core/in-ns 'joker.core)

(defn ^:private conj-import*
  [v sym]
  (let [parts (joker.string/split (name sym) #"\.")]
    (conj v (symbol (last parts)))))

(defmacro import
  [& import-symbols-or-lists]
  (let [specs (map #(if (and (seq? %) (= 'quote (first %))) (second %) %)
                   import-symbols-or-lists)
        syms (reduce (fn [v spec]
                       (if (symbol? spec)
                         (conj-import* v spec)
                         (let [p (first spec) cs (rest spec)]
                           (reduce conj-import* v (map #(symbol (str p "." %)) cs)))))
                     [] specs)]
    `(do
       ~@(map #(list 'joker.core/require (list 'quote %)) syms)
       ~@(map #(list 'def %) (remove resolve syms)))))

(def *known-macros*
  {'memfn nil 'defprotocol nil 'extend-protocol nil 'extend-type nil 'reify nil 'defmulti nil
   'letfn nil '.. nil '. nil 'clojure.test/deftest nil 'clojure.test/is nil 'clojure.test/are nil 'tag__ nil})

(defn ^:private taggify__
  [x]
  (list 'tag__ x))

(def default-data-readers
  (apply merge
   {'inst #'joker.core/identity
    'uuid #'joker.core/identity}
   (map (fn [sym] {sym #'joker.core/taggify__}) (:known-tags joker.core/*linter-config*))))


(defn ^:private validate-fields__
  [fields name]
  (when-not (vector? fields)
    (throw (ex-info "No fields vector given." {:form fields})))
  (let [specials '#{__meta __hash __hasheq __extmap}]
    (when (some specials fields)
      (throw (ex-info (str "The names in " specials " cannot be used as field names for types or records.") {:form fields}))))
  (let [non-syms (remove symbol? fields)]
    (when (seq non-syms)
      (throw (ex-info
              (str "defrecord and deftype fields must be symbols, "
                   *ns* "." name " had: "
                   (apply str (interpose ", " non-syms)))
              {:form fields})))))

(defn ^:private parse-opts__ [s]
  (loop [opts {} [k v & rs :as s] s]
    (if (keyword? k)
      (recur (assoc opts k v) rs)
      [opts s])))

(defn ^:private parse-impls__ [specs]
  (loop [ret {} s specs]
    (if (seq s)
      (recur (assoc ret (first s) (take-while seq? (next s)))
             (drop-while seq? (next s)))
      ret)))

(defn ^:private parse-opts+specs__ [opts+specs]
  (let [[opts specs] (parse-opts__ opts+specs)
        impls (map (fn [[k v]]
                     [k (map (fn [[name params & body]]
                               (cons name (maybe-destructured params body)))
                             v)])
                   (parse-impls__ specs))]
    (when-let [bad-opts (seq (remove #{:no-print :load-ns} (keys opts)))]
      (throw (ex-info (apply print-str "Unsupported option(s) -" bad-opts) {:form opts+specs})))
    impls))

(defn ^:private defns__
  [specs]
  (for [[_ params & body] specs]
    `(fn ~params ~@body)))

(defn ^:private defimpls__
  [impls]
  (apply concat
         (for [[i specs] impls]
           (cons i (defns__ specs)))))

(defmacro defrecord
  [name fields & opts+specs]
  (validate-fields__ fields name)
  (let [impls (parse-opts+specs__ opts+specs)]
    `(defn ~(symbol (str  "->" name))
       ~fields
       (def ~(symbol (str name)))
       (defn ~(symbol (str  "map->" name)) [m])
       ~@(defimpls__ impls))))

(defmacro deftype
  [name fields & opts+specs]
  (validate-fields__ fields name)
  (let [impls (parse-opts+specs__ opts+specs)]
    `(defn ~(symbol (str  "->" name))
       ~fields
       (def ~(symbol (str name)))
       ~@(defimpls__ impls))))

(defmacro defmethod
  [multifn dispatch-val & fn-tail]
  `(do ~multifn (fn ~@fn-tail)))

(doseq [sym (:known-namespaces joker.core/*linter-config*)]
  (inject-ns__ sym))


;; Redefine some core functions with type hints

(defn cons [x ^Seqable seq] (cons__ x seq))
(defn first [^Seqable coll] (first__ coll))
(defn next [^Seqable coll] (next__ coll))
(defn rest [^Seqable coll] (rest__ coll))
(defn seq [^Seqable coll] (seq__ coll))
(defn instance? [^Type c x] (instance?__ c x))
(defn ex-info
  ([^String msg ^Map map] (ex-info__ msg map))
  ([^String msg ^Map map ^Error cause] (ex-info__ msg map cause)))
(defn with-meta [^Meta obj ^Map m] (with-meta__ obj m))
(defn vec [^Seqable coll] (vec__ coll))
(defn not-every? [^Callable pred ^Seqable coll] (not (every? pred coll)))
(defn not-any? [^Callable pred ^Seqable coll] (not (some pred coll)))
(defn read-string [^String s] (read-string__ s))

;; Clojure special forms not supported by Joker
(defn new [& args])

;; Fake "macro" to handle tagged literals
(defn tag__ [x])

;; Clojure core macros not supported by Joker

(defn vswap! [vol f & args])
(defn areduce [a idx ret init expr])
(defn locking [x & body])
(defn amap [a idx ret expr])
(defn memfn [name & args])
(defn defprotocol [name & body])
(defn extend-protocol [p & specs])
(defn extend-type [t & specs])
(defn reify [& body])
(defn defmulti [mm-name & options])
(defn letfn [fnspecs & body])
(defn .. [x form & more])
(defn . [x m & args])
(defn refer-clojure [& filters])

;; Clojure core functions not supported by Joker

(defn inst-ms [inst])
(defn inst? [x])
(defn uuid? [x])
(defn halt-when
  ([pred])
  ([pred retf]))

;; Clojure core functions with arities not supported by Joker
(defn spit [f content & options])

;; Clojure core vars not supported by Joker

(def *print-level*)
(def *print-meta*)
(def *print-length*)
(def *print-dup*)

;; Add transducer arity to standard functions

(def __map__ map)
(defn map
  ([^Callable x])
  ([^Callable x ^Seqable coll]
   (__map__ x coll))
  ([^Callable x c & colls]
   (apply __map__ x c colls)))

(def __filter__ filter)
(defn filter
  ([^Callable x])
  ([^Callable x ^Seqable coll]
   (__filter__ x coll)))

(def __remove__ remove)
(defn remove
  ([^Callable x])
  ([^Callable x ^Seqable coll]
   (__remove__ x coll)))

(def __take__ take)
(defn take
  ([^Number x])
  ([^Number x ^Seqable coll]
   (__take__ x coll)))

(def __take-while__ take-while)
(defn take-while
  ([^Callable x])
  ([^Callable x ^Seqable coll]
   (__take-while__ x coll)))

(def __drop__ drop)
(defn drop
  ([^Number x])
  ([^Number x ^Seqable coll]
   (__drop__ x coll)))

(def __drop-while__ drop-while)
(defn drop-while
  ([^Callable x])
  ([^Callable x ^Seqable coll]
   (__drop-while__ x coll)))

(def __take-nth__ take-nth)
(defn take-nth
  ([^Number x])
  ([^Number x ^Seqable coll]
   (__take-nth__ x coll)))

(def __distinct__ distinct)
(defn distinct
  ([])
  ([coll]
   (__distinct__ coll)))

(def __replace__ replace)
(defn replace
  ([x])
  ([x coll]
   (__replace__ x coll)))

(def __interpose__ interpose)
(defn interpose
  ([x])
  ([x coll]
   (__interpose__ x coll)))

(def __into__ into)
(defn into
  ([to from]
   (__into__ to from))
  ([to xform from]))

(def __partition-by__ partition-by)
(defn partition-by
  ([x])
  ([x coll]
   (__partition-by__ x coll)))

(def __partition-all__ partition-all)
(defn partition-all
  ([n])
  ([n coll]
   (__partition-all__ n coll))
  ([n step coll]
   (__partition-all__ n step coll)))

(def __map-indexed__ map-indexed)
(defn map-indexed
  ([x])
  ([x coll]
   (__map-indexed__ x coll)))

(def __keep__ keep)
(defn keep
  ([x])
  ([x coll]
   (__keep__ x coll)))

(def __keep-indexed__ keep-indexed)
(defn keep-indexed
  ([x])
  ([x coll]
   (__keep-indexed__ x coll)))

(defn cat
  [x])

(def __dedupe__ dedupe)
(defn dedupe
  ([])
  ([coll]
   (__dedupe__ coll)))

(def __random-sample__ random-sample)
(defn random-sample
  ([x])
  ([x coll]
   (__random-sample__ x coll)))

(def __sequence__ sequence)
(defn sequence
  ([coll]
   (__sequence__ coll))
  ([xform coll])
  ([xform coll & colls]))

(joker.core/in-ns 'user)

