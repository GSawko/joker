(joker.core/in-ns 'joker.core)

(def *linter-config*
  (try
    (read-string (slurp (str (get (joker.os/env) "HOME") "/.joker")))
    (catch Error e {})))

(def *known-macros*
  #{'deftype 'memfn 'defmethod 'defprotocol 'extend-protocol 'extend-type 'reify 'defmulti 'letfn 'defrecord '..
    'clojure.test/deftest 'clojure.test/is 'clojure.test/are})

;; Clojure core macros not supported by Joker

(defn doto [x & forms])
(defn vswap! [vol f & args])
(defn areduce [a idx ret init expr])
(defn locking [x & body])
(defn amap [a idx ret expr])

(def deftype)
(def memfn)
(def defmethod)
(def defprotocol)
(def extend-protocol)
(def extend-type)
(def reify)
(def defmulti)
(def letfn)
(def defrecord)
(def .. )

;; Add transducer arity to standard functions

(def __map__ map)
(defn map
  ([x])
  ([x & colls]
   (apply __map__ x colls)))

(def __filter__ filter)
(defn filter
  ([x])
  ([x coll]
   (__filter__ x coll)))

(def __remove__ remove)
(defn remove
  ([x])
  ([x coll]
   (__remove__ x coll)))

(def __take__ take)
(defn take
  ([x])
  ([x coll]
   (__take__ x coll)))

(def __take-while__ take-while)
(defn take-while
  ([x])
  ([x coll]
   (__take-while__ x coll)))

(def __drop__ drop)
(defn drop
  ([x])
  ([x coll]
   (__drop__ x coll)))

(def __drop-while__ drop-while)
(defn drop-while
  ([x])
  ([x coll]
   (__drop-while__ x coll)))

(def __take-nth__ take-nth)
(defn take-nth
  ([x])
  ([x coll]
   (__take-nth__ x coll)))

(def __distinct__ distinct)
(defn distinct
  ([])
  ([coll]
   (__distinct__ coll)))

(def __replace__ replace)
(defn replace
  ([x])
  ([x coll]
   (__replace__ x coll)))

(def __interpose__ interpose)
(defn interpose
  ([x])
  ([x coll]
   (__interpose__ x coll)))

(def __into__ into)
(defn into
  ([to from]
   (__into__ to from))
  ([to xform from]))

(def __partition-by__ partition-by)
(defn partition-by
  ([x])
  ([x coll]
   (__partition-by__ x coll)))

(def __partition-all__ partition-all)
(defn partition-all
  ([n])
  ([n coll]
   (__partition-all__ n coll))
  ([n step coll]
   (__partition-all__ n step coll)))

(def __map-indexed__ map-indexed)
(defn map-indexed
  ([x])
  ([x coll]
   (__map-indexed__ x coll)))

(def __keep__ keep)
(defn keep
  ([x])
  ([x coll]
   (__keep__ x coll)))

(def __keep-indexed__ keep-indexed)
(defn keep-indexed
  ([x])
  ([x coll]
   (__keep-indexed__ x coll)))

(defn cat
  [x])

(def __dedupe__ dedupe)
(defn dedupe
  ([])
  ([coll]
   (__dedupe__ coll)))

(def __random-sample__ random-sample)
(defn random-sample
  ([x])
  ([x coll]
   (__random-sample__ x coll)))

(def __sequence__ sequence)
(defn sequence
  ([coll]
   (__sequence__ coll))
  ([xform coll])
  ([xform coll & colls]))

(joker.core/in-ns 'user)

