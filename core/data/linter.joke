;; This vars are declared for the linter mode to work properly

(doseq [sym '(set! ensure unchecked-remainder-int eduction aset aset-float deftype ->VecNode reduced? chunk-first sorted-map comparator chunk-cons unchecked-float proxy-call-with-super deliver unchecked-subtract file-seq char-array line-seq gen-class with-open conj! class biginteger alter unchecked-add compile .. pcalls refer-clojure memfn struct-map aset-double rsubseq with-loading-context proxy sorted? remove-all-methods unquote-splicing tagged-literal byte-array unchecked-dec sorted-set extend await replicate bound-fn* hash-combine unchecked-inc-int ref-max-history vector-of Throwable->map set-error-handler! underive *print-level* add-watch *verbose-defrecords* aset-short *compile-files* float *math-context* construct-proxy methods agent-error agent-errors ifn? doto bound-fn defstruct print-simple bases aset-byte vswap! struct chunk-buffer chunk-next init-proxy longs unchecked-double await-for into-array future send-off ns-imports seque EMPTY-NODE vreset! char-escape-string defmethod with-local-vars thread-bound? chunk send-via hash-ordered-coll unchecked-byte subseq bytes unchecked-long *print-meta* to-array-2d set-error-mode! map-entry? ancestors set-agent-send-executor! error-handler *suppress-read* update-proxy hash-unordered-coll get-thread-bindings shorts ref-min-history create-struct completing int-array *unchecked-math* ref-set sorted-map-by *fn-loader* *use-context-classloader* await1 *print-length* future-cancel object-array accessor shutdown-agents print-ctor *default-data-reader-fn* areduce definline *compile-path* find-protocol-impl volatile? *print-dup* *compiler-options* unquote release-pending-sends re-matcher *agent* extends? supers byte unreduced floats disj! load-reader bean booleans locking error-mode decimal? set-validator! primitives-classnames *warn-on-reflection* alength restart-agent agent defprotocol send alter-var-root ints ->Eduction mix-collection-hash satisfies? reader-conditional bigdec to-array unchecked-subtract-int *allow-unresolved-vars* munge *source-path* extend-protocol unchecked-multiply-int aset-boolean chunk-rest isa? float-array *data-readers* get-method future-cancelled? default-data-readers unchecked-multiply namespace-munge future-done? find-keyword ->VecSeq find-protocol-method *read-eval* extend-type aset-int pmap -cache-protocol-fn ensure-reduced reify *clojure-version* unchecked-int gen-interface unchecked-negate chars defmulti prefer-method unchecked-short class? boolean-array ->ArrayChunk persistent! unchecked-dec-int extenders aset-char future? rationalize print-method remove-watch pop-thread-bindings proxy-name ref push-thread-bindings aget ref-history-count pvalues doubles assoc! get-validator definterface future-call long-array descendants resultset-seq add-classpath short char-name-string unchecked-add-int aclone reduced aset-long make-hierarchy dissoc! set-agent-send-off-executor! unchecked-inc letfn clear-agent-errors reader-conditional? proxy-super unchecked-negate-int volatile! proxy-mappings enumeration-seq amap import short-array transient prefers compare-and-set! transduce unchecked-divide-int clojure-version iterator-seq unchecked-char derive chunk-append with-precision re-groups pop! commute remove-method get-proxy-class dosync method-sig sync sorted-set-by long make-array defrecord ->Vec tagged-literal? promise double-array print-dup parents record? -reset-methods io!)]
  (intern *ns* sym))

(def ^:private defproject)

(core/in-ns 'core)

(defn ^:private conj-import*
  [v sym]
  (let [r (conj v sym)
        parts (string/split (name sym) #"\.")]
    (if (> (count parts) 1)
      (conj r (symbol (last parts)))
      r)))

(defmacro import
  [& import-symbols-or-lists]
  (let [specs (map #(if (and (seq? %) (= 'quote (first %))) (second %) %)
                   import-symbols-or-lists)
        syms (reduce (fn [v spec]
                       (if (symbol? spec)
                         (conj-import* v spec)
                         (let [p (first spec) cs (rest spec)]
                           (reduce conj-import* v (map #(symbol (str p "." %)) cs)))))
                     [] specs)]
    `(do
       ~@(map #(list 'core/require (list 'quote %)) syms)
       ~@(map #(list 'def %) (remove resolve syms)))))

(core/in-ns 'user)

(core/import
 AbstractMethodError                           AbstractStringBuilder                         Appendable
 ApplicationShutdownHooks                      ArithmeticException                           ArrayIndexOutOfBoundsException
 ArrayStoreException                           AssertionError                                AssertionStatusDirectives
 AutoCloseable                                 Boolean                                       BootstrapMethodError
 Byte                                          CharSequence                                  Character
 CharacterData                                 CharacterData00                               CharacterData01
 CharacterData02                               CharacterData0E                               CharacterDataLatin1
 CharacterDataPrivateUse                       CharacterDataUndefined                        CharacterName
 Class                                         ClassCastException                            ClassCircularityError
 ClassFormatError                              ClassLoader                                   ClassLoaderHelper
 ClassNotFoundException                        ClassValue                                    CloneNotSupportedException
 Cloneable                                     Comparable                                    Compiler
 ConditionalSpecialCasing                      Deprecated                                    Double
 Enum                                          EnumConstantNotPresentException               Error
 Exception                                     ExceptionInInitializerError                   Float
 FunctionalInterface                           IllegalAccessError                            IllegalAccessException
 IllegalArgumentException                      IllegalMonitorStateException                  IllegalStateException
 IllegalThreadStateException                   IncompatibleClassChangeError                  IndexOutOfBoundsException
 InheritableThreadLocal                        InstantiationError                            InstantiationException
 Integer                                       InternalError                                 InterruptedException
 Iterable                                      LinkageError                                  Long
 Math                                          NegativeArraySizeException                    NoClassDefFoundError
 NoSuchFieldError                              NoSuchFieldException                          NoSuchMethodError
 NoSuchMethodException                         NullPointerException                          Number
 NumberFormatException                         Object                                        OutOfMemoryError
 Override                                      Package                                       Process
 ProcessBuilder                                ProcessEnvironment                            ProcessImpl
 Readable                                      ReflectiveOperationException                  Runnable
 Runtime                                       RuntimeException                              RuntimePermission
 SafeVarargs                                   SecurityException                             SecurityManager
 Short                                         Shutdown                                      StackOverflowError
 StackTraceElement                             StrictMath                                    String
 StringBuffer                                  StringBuilder                                 StringCoding
 StringIndexOutOfBoundsException               SuppressWarnings                              System
 SystemClassLoaderAction                       Terminator                                    Thread
 ThreadDeath                                   ThreadGroup                                   ThreadLocal
 Throwable                                     TypeNotPresentException                       UNIXProcess
 UnknownError                                  UnsatisfiedLinkError                          UnsupportedClassVersionError
 UnsupportedOperationException                 VerifyError                                   VirtualMachineError
 Void)

(doseq [sym '(clojure.edn clojure.core clojure.uuid clojure.core.server clojure.java.io clojure.main clojure.core.protocols clojure.instant clojure.string)]
  (create-ns sym))

(core/in-ns 'core)

;; Add transducer arity to standard functions
(def __map__ map)
(defn map
  ([x])
  ([x & colls]
   (apply __map__ x colls)))

(def __filter__ filter)
(defn filter
  ([x])
  ([x coll]
   (__filter__ x coll)))

(def __remove__ remove)
(defn remove
  ([x])
  ([x coll]
   (__remove__ x coll)))

(def __take__ take)
(defn take
  ([x])
  ([x coll]
   (__take__ x coll)))

(def __take-while__ take-while)
(defn take-while
  ([x])
  ([x coll]
   (__take-while__ x coll)))

(def __drop__ drop)
(defn drop
  ([x])
  ([x coll]
   (__drop__ x coll)))

(def __drop-while__ drop-while)
(defn drop-while
  ([x])
  ([x coll]
   (__drop-while__ x coll)))

(def __take-nth__ take-nth)
(defn take-nth
  ([x])
  ([x coll]
   (__take-nth__ x coll)))

(def __distinct__ distinct)
(defn distinct
  ([])
  ([coll]
   (__distinct__ coll)))

(def __replace__ replace)
(defn replace
  ([x])
  ([x coll]
   (__replace__ x coll)))

(def __interpose__ interpose)
(defn interpose
  ([x])
  ([x coll]
   (__interpose__ x coll)))

(def __into__ into)
(defn into
  ([to from]
   (__into__ to from))
  ([to xform from]))

(def __partition-by__ partition-by)
(defn partition-by
  ([x])
  ([x coll]
   (__partition-by__ x coll)))

(def __partition-all__ partition-all)
(defn partition-all
  ([n])
  ([n coll]
   (__partition-all__ n coll))
  ([n step coll]
   (__partition-all__ n step coll)))

(def __map-indexed__ map-indexed)
(defn map-indexed
  ([x])
  ([x coll]
   (__map-indexed__ x coll)))

(def __keep__ keep)
(defn keep
  ([x])
  ([x coll]
   (__keep__ x coll)))

(def __keep-indexed__ keep-indexed)
(defn keep-indexed
  ([x])
  ([x coll]
   (__keep-indexed__ x coll)))

(defn cat
  [x])

(def __dedupe__ dedupe)
(defn dedupe
  ([])
  ([coll]
   (__dedupe__ coll)))

(def __random-sample__ random-sample)
(defn random-sample
  ([x])
  ([x coll]
   (__random-sample__ x coll)))

(def __sequence__ sequence)
(defn sequence
  ([coll]
   (__sequence__ coll))
  ([xform coll])
  ([xform coll & colls]))

(core/in-ns 'user)

